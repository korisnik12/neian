Pawn Language PDF na srpskom

1. String - string je tip podataka koji se koristi za predstavljanje teksta ili niske znakova. 
primer:
	new string[64];
	format(string, sizeoff string, "Hello World");
	SendClientMessage(playerid, -1, string);

2. Operatori:

Logicki operatori:

&& (i, AND): Vraca true ako su oba uslova tacna.
|| (ili, OR): Vraca true ako je barem jedan uslov tacan.
! (negacija, NOT): Invertuje logicku vrednost, tj. vraca suprotnu vrednost.
primer:
1.if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pStaff] < 1) return SendClientMessage(playerid, -1, "Nemas permisije !");
2.if(PlayerInfo[playerid][pAdmin] < 1 || PI[playerid][pStaff] < 1) return SendClientMessage(playerid, -1, "Nemas permisije !");
3.if(PlayerInfo[playerid][pAdmin] != 1 || PlayerInfo[playerid][pOvlascenje] == false) return SendClientMessage(playerid, -1, "Nemas permisije !");



Relacioni Operatori:

== (jednako): Proverava da li su dve vrednosti jednake.
!= (nije jednako): Proverava da li su dve vrednosti razlicite.
> (vece od): Proverava da li je prva vrednost veca od druge.
< (manje od): Proverava da li je prva vrednost manja od druge.
>= (vece ili jednako): Proverava da li je prva vrednost veca ili jednaka drugoj.
<= (manje ili jednako): Proverava da li je prva vrednost manja ili jednaka drugoj.
primeri:

1. if(PlayerInfo[playerid][pAdmin] == 1) return SendClientMessage(playerid, -1, "Nemas permisije !");
2. if(PlayerInfo[playerid][sqlID] != 1) return SendClientMessage(playerid, -1, "Nemas permisije !");
3. if(PlayerInfo[playerid][pAdmin] > 1) return SendClientMessage(playerid, -1, "Nemas permisije !");
4. if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, -1, "Nemas permisije !");
5. if(PlayerInfo[playerid][pAdmin] >= 1) return SendClientMessage(playerid, -1, "Nemas permisije !");
6. if(PlayerInfo[playerid][pAdmin] <= 1) return SendClientMessage(playerid, -1, "Nemas permisije !");

3. Float:
float je tip podataka u programiranju koji se koristi za predstavljanje decimalnih brojeva sa pomicnim zarezom. 
Drugim recima, float podaci imaju decimalni deo i koriste se kada želimo da predstavimo brojeve sa tacnošcu na decimalnim mestima.
primer:
	new Float:PosX, Float:PosY, Float:PosZ, Float:PosA;
	CreateVehicle(VehicleModel, PosX, PosY, PosZ, PosA,  color1, color2, -1);

4. Specifikatori naprimer:
%s - Ukratko, %s je format specifikator koji se koristi za rad sa tekstualnim podacima (niskama) prilikom formatiranja niski u jezicima kao što su C i C++.
primer:
	new string[64];
	format(string, sizeof string, "Dobrodosao %s zabavi se", ReturnPlayerName(playerid));
	SendClientMessage(playerid, -1, string)

%d - %d je format specifikator koji se koristi za rad sa celobrojnim vrednostima prilikom formatiranja niski u jezicima kao što su C i C++.

primer:
	new ubistvovreme = 5;
	new ubijenputa = 10;
	new string[64];
	format(string, sizeof string, "Ti imas jos %ds vremena do sledeceg ubistva,a ubijen si %d puta", ubistvovreme, ubijenputa);
	SendClientMessage(playerid, -1, string);

%i - Ukratko, %i je format specifikator koji se koristi za rad sa celobrojnim vrednostima, ukljucujuci i decimalne vrednosti u oktalnom ili heksadecimalnom formatu.
primer:
	new pozicijax = 0.3650
	new pozicijay = 0.5606
	new pozicijaz = 0.5609
	new string[64];
	format(string, sizeof string, "Decimalni brojevi su %i", pozicijax+pozicijay+pozicijaz);
	SendClientMessage(playerid, -1, string);

%f - Ukratko, %f je format specifikator koji se koristi za rad sa decimalnim brojevima (floating-point numbers) prilikom formatiranja niski u jezicima kao što su C i C++.
primer:
	new x = 2930.5690.3960.1980
	new y = 390.5690.3560.190
	new z = 8960.5699.5430.3609
	new string[64];
	format(string, sizeof string, "Pozicije su %f", x, y, z);
	SendClientMessage(playerid, -1, string);

if - Uslov u if izrazu može biti bilo koji izraz koji se procenjuje kao logicka vrednost (true ili false). 
Uobicajeno se koriste uslovne operacije (npr. >, <, ==, !=, itd.) za proveru odrecenih uslova.
Ukoliko želimo izvršiti odrecene akcije kada je uslov netacan (false), možemo koristiti if-else konstrukciju, 
koja dodatno omogucava definisanje bloka koda koji ce se izvršiti kada uslov nije ispunjen.
primer:
if(PlayerInfo[playerid][pAdmin] < 1) return SendClientMessage(playerid, -1, "Nisi ovlascen !");

else - else konstrukcija igra kljucnu ulogu u logickim grananjima i donošenju odluka u programiranju, 
omogucavajuci programima da se prilagode razlicitim situacijama i izvršavaju odgovarajuce akcije na osnovu uslova koji su zadovoljeni.
primer:
if(PlayerInfo[playerid][pAdmin] == 1)
{
	PlayerInfo[pLevel]+= 5;
}
else if(PlayerInfo[playerid][pAdmin] == 2)
{
	PlayerInfo[pLevel]+= 10;

}

for - for petlje su veoma korisne kada želimo da ponovimo odrecene akcije tacno odreceni broj puta, 
kao i kada radimo sa nizovima i kolekcijama podataka. Ukoliko ne znamo unapred koliko puta želimo da ponavljamo, obicno koristimo while ili do-while petlje.
primer:
	for(new i = 0; i < 56 i ++)
	{
		PlayerTextDrawShow(playerid, TDPTD[playerid][i]);	
		
	}

format - Prikazivanje podataka korisniku: Formatiranje omogucava programu da prikaže podatke na nacin koji je razumljiv i prikladan za korisnika. Na primer, 
kada ispisujemo rezultate, poruke ili druge informacije na ekran, formatiranje omogucava da te informacije budu jasne i pregledne.
primer:
	new string[64];
	format(string, sizeof string, "Formatirali smo jedan string");
	SendClientMessage(playerid, -1, string);


varijable - Varijabla je osnovni koncept u programiranju i predstavlja imenovanu lokaciju u memoriji koja se koristi za skladištenje i manipulaciju podacima. Varijable imaju odreceni tip podataka koji definiše vrstu vrednosti koju mogu da sadrže, kao što su celobrojne vrednosti, decimalni brojevi, tekstualni podaci i druge vrste podataka.

Kada se deklariše varijabla, program rezerviše odgovarajucu memoriju u koju ce se cuvati vrednost te varijable. Ovo omogucava programu da cuva i obracuje podatke tokom izvršavanja programa.

Prilikom deklaracije varijable, potrebno je odrediti njen tip podataka i dati joj jedinstveno ime. Na primer:

new  broj; // Deklaracija celobrojne (integer) varijable sa imenom "broj"
new Float:Pos_X; // Deklaracija decimalne (floating-point) varijable sa Pozicijom X 
new Igraci[MAX_PLAYERS]; // Deklaracija niza koji imaju velicinu konstante MAX_PLAYERS


#define - Prednost korišcenja #define je u tome što omogucava jednostavno definisanje konstanti 
koje se mogu koristiti na više mesta u kodu, 
a njihova vrednost se može lako promeniti na jednom mestu ako je potrebno. 
Ovo cini kod citljivijim i održljivijim. Mecutim, treba biti pažljiv prilikom korišcenja makroa, 
jer pretjerana upotreba ili nepravilno definisanje makroa može dovesti do nepoželjnih efekata u kodu.
primer:

#define c_white "{ffffff}"

#include  - Ukratko, #include se koristi za ukljucivanje sadržaja header fajlova u program, 
što omogucava korišcenje funkcija,
 konstanti i drugih elemenata definisanih u tim fajlovima u glavnom programu. 
 Ovo olakšava organizaciju koda i omogucava ponovno korišcenje koda u razlicitim delovima programa.
primer:
#include <a_samp>

stock - implementira funkciju u skripti ne prepoznaje je kao public function te je ne ocitava pri loadu nego pri zavrsavaju funkcije

Forward - je funkcija koja ne ucitava odmah nego se implementira u skripti

public -  public je keyword kojim mozete praviti globalne varijable ili funkcije koje mogu biti pozvane od strane abstraktne masine (servera)
primer:
public OnGameModeInit()
{
	SetGameModeText("v2.0");
	return 1;
}

enum - Enumeracija ili nabrajanje, ili enum, je simboličko ime za skup vrijednosti. Enumeracije se tretiraju kao tipovi podataka i možete ih koristiti za kreiranje skupova konstanti za korištenje s varijablama i svojstvima.
primer:
enum {
	DIALOG_REGISTER,
	DIALOG_LOGIN
}

static - static je keyword sa kojim ogranicavas pristupacnost odredjenoj varijabli ili funkciji unutar neke sekcije
primer:
static
	player_Admin[MAX_PLAYERS],
	player_Staff[MAX_PLAYERS];